"use strict";(self.webpackChunkkira_documentation=self.webpackChunkkira_documentation||[]).push([[9375],{7947:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(5893),o=n(1151);n(4866),n(5162);const i={title:"Governance",sidebar_position:2,slug:"/aa3b3aee-8e8d-4c5d-bb2c-3f4bf2462afa"},r=void 0,s={id:"What-is-KIRA/SEKAI/Governance",title:"Governance",description:"KIRA introduces a governance system that fundamentally departs from the conventional stake-weighted voting mechanisms prevalent in blockchain networks. Instead, it adopts a per-capita approach, ensuring that every vote carries equal weight, irrespective of the voter's stake. Within this system, Consensus nodes hold a foundational role by serving as the primary decision-makers. They form the initial group of Councilors, which defines any network participants endowed with the right to propose and vote on network decisions. Anyone can become a Councilor; the group is open to all users, contingent upon receiving endorsement from the existing council.",source:"@site/tabs/Learn/What-is-KIRA/SEKAI/Governance.mdx",sourceDirName:"What-is-KIRA/SEKAI",slug:"/aa3b3aee-8e8d-4c5d-bb2c-3f4bf2462afa",permalink:"/docs.kira.network/learn/aa3b3aee-8e8d-4c5d-bb2c-3f4bf2462afa",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Governance",sidebar_position:2,slug:"/aa3b3aee-8e8d-4c5d-bb2c-3f4bf2462afa"},sidebar:"defaultSidebar",previous:{title:"Consensus",permalink:"/docs.kira.network/learn/cf661a9f-09e0-4bc3-8248-bf0e545f0418"},next:{title:"Middleware - INTERX",permalink:"/docs.kira.network/learn/8a93bc9c-ce24-4129-96d5-9bbe381f6851"}},l={},c=[{value:"Roles &amp; permissions",id:"4a92d1418ae641c7aae19bdb862b6ead",level:3},{value:"Structure",id:"3c994110ecf44f89ab62ecadfe43b8a8",level:3},{value:"Decision-making framework",id:"97310261cd6643c59e08f59fa9662fe1",level:3}];function u(e){const t={h3:"h3",p:"p",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"KIRA introduces a governance system that fundamentally departs from the conventional stake-weighted voting mechanisms prevalent in blockchain networks. Instead, it adopts a per-capita approach, ensuring that every vote carries equal weight, irrespective of the voter's stake. Within this system, Consensus nodes hold a foundational role by serving as the primary decision-makers. They form the initial group of Councilors, which defines any network participants endowed with the right to propose and vote on network decisions. Anyone can become a Councilor; the group is open to all users, contingent upon receiving endorsement from the existing council."}),"\n",(0,a.jsx)(t.h3,{id:"4a92d1418ae641c7aae19bdb862b6ead",children:"Roles & permissions"}),"\n",(0,a.jsx)(t.p,{children:"KIRA's governance structure is underpinned by a detailed system of permissions, where specific actions, such as voting and proposing, are tied to unique permissions. These permissions dictate whether an account can execute a specific transaction. This granularity in permissions serves as the building blocks for 'roles,' which bundle permissions into comprehensive profiles that define the capabilities and responsibilities of subsets of council members. Being assigned a role equates to having all the permissions it encompasses. Roles, by their nature, are constructs of governance; the only pre-defined role in KIRA is that of \u201cvalidator\u201d automatically given to Consensus nodes. All other roles are conceptualized and established through governance actions. The creation of new roles is initiated at the network's inception by validators, who use their permissions to propose and approve the establishment of these roles through governance proposals."}),"\n",(0,a.jsx)(t.h3,{id:"3c994110ecf44f89ab62ecadfe43b8a8",children:"Structure"}),"\n",(0,a.jsx)(t.p,{children:"KIRA's governance is inherently flexible and designed to evolve organically within its decentralized framework. Starting with the principle that each Consensus node possesses equal voting power (per capita), they form the cornerstone of governance. They have the autonomy to delegate various governance responsibilities to other verified groups through the definition of roles. This could lead to a dynamic where one group may have certain authority over another, and vice versa, depending on the distribution of responsibilities related to matters such as proposal voting or the management of malicious activities within the network. The governance model's modular design facilitates customized configurations, including multicameral systems for specialized proposal handling and checks and balances to mitigate centralization risks. This adaptability ensures KIRA's governance can evolve to meet diverse network conditions and requirements, underlining the network's capacity for self-directed evolution without centralized oversight."}),"\n",(0,a.jsx)(t.h3,{id:"97310261cd6643c59e08f59fa9662fe1",children:"Decision-making framework"}),"\n",(0,a.jsx)(t.p,{children:"KIRA governance decisions are voted on-chain to immutably record outcomes on the blockchain itself. However, discussions primarily take place through off-chain coordination amongst Councilors and community members. When a proposal is created, only Councilors can vote if they have the required permission. A proposal passes if over 50% of votes are 'yes', otherwise it is rejected. A minority veto rejection is also possible if over 33.4% of all votes are 'veto\u2019. Proposals require a quorum of 33% to be valid to reflect adequate Councilor participation and representation. If quorum is not reached, the proposal fails. After the voting period ends, there is a defined enactment time before changes take effect, allowing the community to prepare for the outcome. The minimum enactment time is configured by governance and applies to all proposals. Governance can additionally configure different voting periods for individual proposals. This structured on-chain process enables transparent and definitive decision-making."}),"\n",(0,a.jsx)(t.p,{children:"KIRA does not utilize on-chain signaling proposals, which commonly lead to inefficient binary outcomes that fail to capture nuanced perspectives. Instead, it offers on-chain Polls to efficiently gauge sentiment and build consensus on complex issues. Polls allow for multiple customized voting options that cater to the diverse views within the community. This flexibility makes them well-suited for achieving consensus on matters like upgrade timeframes, future protocol changes, and other key issues. The Poll module provides an inclusive signaling mechanism that complements off-chain discussion. Ultimately, Polls enable KIRA's governance to reach timely decisions informed by the authentic and varied opinions of participants."})]})}function d(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>r});n(7294);var a=n(6905);const o={tabItem:"tabItem_Ymn6"};var i=n(5893);function r(e){let{children:t,hidden:n,className:r}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,r),hidden:n,children:t})}},4866:(e,t,n)=>{n.d(t,{Z:()=>I});var a=n(7294),o=n(6905),i=n(2466),r=n(6550),s=n(469),l=n(1980),c=n(7392),u=n(12);function d(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const o=(0,r.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(o.location.search);t.set(i,e),o.replace({...o.location,search:t.toString()})}),[i,o])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,i=h(e),[r,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[c,d]=f({queryString:n,groupId:o}),[m,v]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,i]=(0,u.Nk)(n);return[o,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:o}),b=(()=>{const e=c??m;return p({value:e,tabValues:i})?e:null})();(0,s.Z)((()=>{b&&l(b)}),[b]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),v(e)}),[d,v,i]),tabValues:i}}var v=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(5893);function y(e){let{className:t,block:n,selectedValue:a,selectValue:r,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),u=e=>{const t=e.currentTarget,n=l.indexOf(t),o=s[n].value;o!==a&&(c(t),r(o))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t),children:s.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>l.push(e),onKeyDown:d,onClick:u,...i,className:(0,o.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:o}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function k(e){const t=m(e);return(0,g.jsxs)("div",{className:(0,o.Z)("tabs-container",b.tabList),children:[(0,g.jsx)(y,{...e,...t}),(0,g.jsx)(w,{...e,...t})]})}function I(e){const t=(0,v.Z)();return(0,g.jsx)(k,{...e,children:d(e.children)},String(t))}},1151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>r});var a=n(7294);const o={},i=a.createContext(o);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);