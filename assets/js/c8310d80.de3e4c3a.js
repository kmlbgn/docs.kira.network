"use strict";(self.webpackChunkkira_documentation=self.webpackChunkkira_documentation||[]).push([[9386],{1031:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>a,contentTitle:()=>t,default:()=>m,frontMatter:()=>d,metadata:()=>c,toc:()=>h});var n=i(5893),r=i(1151),l=i(4866),o=i(5162);const d={title:"Roles & Permissions",sidebar_position:4,slug:"/980ceb2f-9bc1-4133-aad0-bfb8a5c55536"},t="Concept {#c77098bc9e8041d3acd7dd398e7ce168}",c={id:"KIRA\u2019s-stack/SEKAI/Modules/Governance/Roles-&-Permissions",title:"Roles & Permissions",description:"c77098bc9e8041d3acd7dd398e7ce168}",source:"@site/docs/KIRA\u2019s-stack/SEKAI/Modules/Governance/Roles-&-Permissions.mdx",sourceDirName:"KIRA\u2019s-stack/SEKAI/Modules/Governance",slug:"/980ceb2f-9bc1-4133-aad0-bfb8a5c55536",permalink:"/docs.kira.network/docs/980ceb2f-9bc1-4133-aad0-bfb8a5c55536",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Roles & Permissions",sidebar_position:4,slug:"/980ceb2f-9bc1-4133-aad0-bfb8a5c55536"},sidebar:"defaultSidebar",previous:{title:"Councilors & governance ranking",permalink:"/docs.kira.network/docs/d6f8543a-3b76-44a8-8fab-eeafcef56c8e"},next:{title:"Polls",permalink:"/docs.kira.network/docs/f5e18e49-927a-4a4f-ae70-bb9fc5606243"}},a={},h=[{value:"Permissions",id:"ea6396ff8b684c33be953070bdcf0c51",level:3},{value:"Roles",id:"f7f0069d7e1946fdb56c457decd61991",level:3},{value:"Role &amp; account permission conflicts",id:"52640fd598564b83a8e9fb3cdfce60fb",level:3},{value:"Permissions",id:"a516249604cb46369b786e5027ea2e21",level:3},{value:"Roles",id:"7e46e604d88f4bf5a973278b7a07fc98",level:3},{value:"<strong>Create Role</strong>",id:"create-role",level:3},{value:"<strong>Assign</strong> Role",id:"assign-role",level:3},{value:"<strong>Remov</strong>e Role",id:"remove-role",level:3},{value:"<strong>Whitelist Role Permission</strong>",id:"whitelist-role-permission",level:3},{value:"Blacklist <strong>Role\u2019s</strong> Permission",id:"blacklist-roles-permission",level:3},{value:"<strong>Remove Role\u2019s Whitelisted Permission</strong>",id:"remove-roles-whitelisted-permission",level:3},{value:"<strong>Remove Role\u2019s Blacklisted Permission</strong>",id:"remove-roles-blacklisted-permission",level:3},{value:"<strong>Whitelist Account Permission</strong>",id:"whitelist-account-permission",level:3},{value:"<strong>Remove Account Whitelisted Permission</strong>",id:"remove-account-whitelisted-permission",level:3},{value:"<strong>Blacklist Account\u2019s Permission</strong>",id:"blacklist-accounts-permission",level:3},{value:"<strong>Remove Account\u2019s Blacklisted Permissions</strong>",id:"remove-accounts-blacklisted-permissions",level:3},{value:"<strong>Query Address Permissions</strong>",id:"query-address-permissions",level:3},{value:"<strong>Query Addresses by Whitelisted Permission</strong>",id:"query-addresses-by-whitelisted-permission",level:3},{value:"<strong>Query Addresses by Blacklisted Permission</strong>",id:"query-addresses-by-blacklisted-permission",level:3},{value:"<strong>Query All Registered Roles</strong>",id:"query-all-registered-roles",level:3},{value:"<strong>Query Roles Assigned to an Address</strong>",id:"query-roles-assigned-to-an-address",level:3},{value:"<strong>Query Role by SID</strong>",id:"query-role-by-sid",level:3},{value:"<strong>Query Addresses by Whitelisted Role</strong>",id:"query-addresses-by-whitelisted-role",level:3},{value:"Assign Role to Account",id:"assign-role-to-account",level:3},{value:"Unassign Role from Account",id:"unassign-role-from-account",level:3},{value:"Blacklist Permission for Account",id:"blacklist-permission-for-account",level:3},{value:"Remove Blacklisted Permission from Account",id:"remove-blacklisted-permission-from-account",level:3},{value:"Whitelist Permission for Account",id:"whitelist-permission-for-account",level:3},{value:"Remove Whitelisted Permission from Account",id:"remove-whitelisted-permission-from-account",level:3},{value:"Create Role",id:"create-role-1",level:3},{value:"Remove Role",id:"remove-role-1",level:3},{value:"Whitelist Permission for Role",id:"whitelist-permission-for-role",level:3},{value:"Remove Whitelisted Permission from Role",id:"remove-whitelisted-permission-from-role",level:3},{value:"Blacklist Permission for Role",id:"blacklist-permission-for-role",level:3},{value:"Remove Blacklisted Permission from Role",id:"remove-blacklisted-permission-from-role",level:3}];function x(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"c77098bc9e8041d3acd7dd398e7ce168",children:"Concept"}),"\n",(0,n.jsx)(s.p,{children:"KIRA governance system utilizes a combination of Roles & Permissions to create a multi-layered governance structure that enables a diverse range of councilors to participate and contribute to the network's decision-making processes. The system operates with just two rules enabling it to bootstrap and evolve almost any imaginable governance model. The rules state that :"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Only whitelisted actors can execute on-chain actions (submit transactions of a given type)."}),"\n",(0,n.jsx)(s.li,{children:"Whitelisted actors can only execute on-chain actions that they have been given the permission to execute."}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"For example, a multicameral system can be created where subsets of councilors specialize in creating and voting on specific subsets of proposals. Alternatively, a separation of power through checks and balances can be implemented, preventing a single governance branch from achieving a privileged position. Overall, the KIRA governance system is designed to be flexible and adaptable, allowing it to constantly improve its efficiency and decentralization without relying on factors such as wealth or stake distribution. This makes it an effective tool for ensuring that network actors are motivated and aligned towards common goals, which is crucial for achieving consensus within the network."}),"\n",(0,n.jsx)(s.h3,{id:"ea6396ff8b684c33be953070bdcf0c51",children:"Permissions"}),"\n",(0,n.jsxs)(s.p,{children:["In KIRA network, every type of transaction that can be sent to SEKAI has a unique permission identifier associated with it and there exist two types of permissions: governance permissions and sudo permissions. Governance permissions allow changes to be made through a governance proposal process, and is always associated with two permissions: proposal creation and voting. Sudo permissions, on the other hand, allow users to make changes directly, bypassing any governance proposal. These permission identifiers can be added to the whitelist or blacklist of an individual KIRA account or a role \u2014 more on this in the following section. If the permission identifier is on the account's whitelist, the account is able to send the corresponding transaction to the blockchain. If the identifier is not on the account's whitelist or is on its blacklist, the account is not able to send the transaction, with the exception of ",(0,n.jsx)(s.code,{children:"MsgSend"}),", and ",(0,n.jsx)(s.code,{children:"MsgMultiSend"})," transactions. For example, if you want to allow a KIRA account to claim a validator seat on the blockchain, you must add the ",(0,n.jsx)(s.strong,{children:"[Problem Internal Link]"})," permission to its whitelist. Only then will the account be able to use the ",(0,n.jsx)(s.code,{children:"claim-validator-seat"})," CLI command to send the ",(0,n.jsx)(s.code,{children:"MsgClaimValidator"})," transaction."]}),"\n",(0,n.jsx)(s.h3,{id:"f7f0069d7e1946fdb56c457decd61991",children:"Roles"}),"\n",(0,n.jsxs)(s.p,{children:["To make it easier to manage hundreds of different permissions, KIRA uses a concept of roles. A role is a collection of permissions that can be associated to a specific KIRA address. This allows the network to manage the permissions of all addresses associated with a role at once, rather than having to change permissions for each individual address. Each permission assigned to a role or individual address can have its own defined parameters, which can be used as input for the function that is triggered when a network actor submits a particular type of transaction. These parameters allow for more granular control of permissions, ensuring that the responsibilities and power of individual network actors can vary widely within the governance model. If the permissions associated with a role are changed, the permissions of all accounts that have been assigned that role will also be changed. Roles can be assigned either by a group of governance members with the appropriate permissions ",(0,n.jsx)(s.strong,{children:"[Problem Internal Link]"})," and ",(0,n.jsx)(s.strong,{children:"[Problem Internal Link]"}),", or by a sudo member  ",(0,n.jsx)(s.strong,{children:"[Problem Internal Link]"})," ."]}),"\n",(0,n.jsx)(s.h3,{id:"52640fd598564b83a8e9fb3cdfce60fb",children:"Role & account permission conflicts"}),"\n",(0,n.jsx)(s.p,{children:"Permissions in the KIRA governance system can be managed at both account and role levels, each with separate whitelists and blacklists. Within the same type (account or role), a permission cannot be present on both the whitelist and the blacklist. In other words, if a permission is on a role's blacklist, it cannot be added to the role's whitelist, and vice versa. The same rule applies to account whitelists and blacklists."}),"\n",(0,n.jsx)(s.p,{children:"It is important to note that conflicting permissions between account and role levels are possible. In cases where conflicts arise between an account's and a role's whitelists and blacklists, the blacklisted permissions always take precedence. This means that if a permission is blacklisted at either the account or role level, the user will be denied that permission, regardless of any whitelists."}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(s.p,{children:["Suppose a user has permission ",(0,n.jsx)(s.strong,{children:"[Problem Internal Link]"})," whitelisted on their account and is also assigned to a role that has permission ",(0,n.jsx)(s.strong,{children:"[Problem Internal Link]"})," blacklisted. In this case, the user will be denied permission ",(0,n.jsx)(s.strong,{children:"[Problem Internal Link]"}),", as the blacklisted permission takes precedence over the whitelisted permission."]})}),"\n",(0,n.jsx)(s.h1,{id:"7a84ff7ef7da4a5788f659d6e6b40ef9",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"a516249604cb46369b786e5027ea2e21",children:"Permissions"}),"\n",(0,n.jsxs)(s.p,{children:["Existing permissions and their correspond types and identifiers are listed ",(0,n.jsx)(s.a,{href:"https://github.com/KiraCore/sekai/blob/master/proto/kira/gov/permission.proto",children:"here"}),", or in the following page:"]}),"\n",(0,n.jsx)(s.h3,{id:"7e46e604d88f4bf5a973278b7a07fc98",children:"Roles"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:(0,n.jsx)(s.strong,{children:"NAME"})}),(0,n.jsx)(s.th,{children:(0,n.jsx)(s.strong,{children:"TYPE"})}),(0,n.jsx)(s.th,{children:(0,n.jsx)(s.strong,{children:"EXAMPLE"})}),(0,n.jsx)(s.th,{children:(0,n.jsx)(s.strong,{children:"DESCRIPTION"})})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"id"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"int"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"1"})}),(0,n.jsx)(s.td,{children:"Identification number of the role - auto assigned"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"sid"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"string"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"some name"})}),(0,n.jsx)(s.td,{children:"Unique identification name of the role"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"description"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"string"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"some text"})}),(0,n.jsx)(s.td,{children:"Description of the role"})]})]})]}),"\n",(0,n.jsx)(s.h1,{id:"20129a3a61f14bba9861c2ce8a335580",children:"CLI syntax & examples"}),"\n",(0,n.jsx)(s.admonition,{type:"note",children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"Each CLI command and proposal process in KIRA requires specific permissions. These permissions must be added to the account's whitelist or obtained as sudo permissions for direct changes. Refer to the"})," ",(0,n.jsx)(s.a,{href:"/980ceb2f-9bc1-4133-aad0-bfb8a5c55536",children:(0,n.jsx)(s.em,{children:"Roles & Permissions"})})," ",(0,n.jsx)(s.em,{children:"documentation for more details."})," ",(0,n.jsx)(s.em,{children:(0,n.jsx)(s.code,{children:"$SIGNER"})})," ",(0,n.jsx)(s.em,{children:"represents the transaction signer's account name or address. For instructions on setting common flags as environment variables, such as"})," ",(0,n.jsx)(s.em,{children:(0,n.jsx)(s.code,{children:"$FLAGS_TX"})})," ",(0,n.jsx)(s.em,{children:"and"})," ",(0,n.jsxs)(s.em,{children:[(0,n.jsx)(s.code,{children:"$FLAGS_QR"}),"__, see the"]}),"  ",(0,n.jsx)(s.em,{children:"section"})]})}),"\n",(0,n.jsxs)(l.Z,{children:[(0,n.jsxs)(o.Z,{value:"transactions",label:"Transactions",children:[(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:(0,n.jsx)(s.code,{children:"role create role"})}),(0,n.jsx)(s.th,{children:"Create a new role with permissions."})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"role assign"})}),(0,n.jsx)(s.td,{children:"Assign a role to an account."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"role unassign role"})}),(0,n.jsx)(s.td,{children:"Remove a role from an account."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"role blacklist-permission"})}),(0,n.jsx)(s.td,{children:"Blacklist a permission for a role."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"role remove-whitelisted-permission"})}),(0,n.jsx)(s.td,{children:"Remove a whitelisted permission from a role."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"role remove-blacklisted-permission"})}),(0,n.jsx)(s.td,{children:"Remove a blacklisted permission from a role."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"role whitelist-permission"})}),(0,n.jsx)(s.td,{children:"Whitelist a permission for a role."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"permission whitelist"})}),(0,n.jsx)(s.td,{children:"Assign a permission to an account's whitelist."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"permission blacklist"})}),(0,n.jsx)(s.td,{children:"Assign a permission to an account's blacklist."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"permission remove-whitelisted"})}),(0,n.jsx)(s.td,{children:"Remove a whitelisted permission from an account."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"permission remove-blacklisted"})}),(0,n.jsx)(s.td,{children:"Remove a blacklisted permission from an account."})]})]})]}),(0,n.jsx)(s.h3,{id:"create-role",children:(0,n.jsx)(s.strong,{children:"Create Role"})}),(0,n.jsxs)(s.p,{children:["Create a new role with sudo permissions using the ",(0,n.jsx)(s.code,{children:"create"})," command followed by the role's unique identifier ",(0,n.jsx)(s.code,{children:"$ROLE_SID"})," and a description ",(0,n.jsx)(s.code,{children:"$ROLE_DESCRIPTION"}),"."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Variables"})}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov role create role \\\n--from=$SIGNER $FLAGS_TX \\\n$ROLE_SID $ROLE_DESCRIPTION\n"})}),(0,n.jsxs)(s.h3,{id:"assign-role",children:[(0,n.jsx)(s.strong,{children:"Assign"})," Role"]}),(0,n.jsxs)(s.p,{children:["Assign a role with sudo permissions to an account using the ",(0,n.jsx)(s.code,{children:"assign"})," command followed by the role's identifier ",(0,n.jsx)(s.code,{children:"$ROLE_ID"}),"."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov role assign \\\n--from=$SIGNER $FLAGS_TX \\\n$ROLE_ID --addr=$TARGET_ADDRESS\n"})}),(0,n.jsxs)(s.h3,{id:"remove-role",children:[(0,n.jsx)(s.strong,{children:"Remov"}),"e Role"]}),(0,n.jsxs)(s.p,{children:["Remove a role with sudo permissions from an account using the ",(0,n.jsx)(s.code,{children:"remove role"})," command followed by the role's identifier ",(0,n.jsx)(s.code,{children:"$ROLE_ID"}),"."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov role remove role \\\n--from=$SIGNER $FLAGS_TX \\\n$ROLE_ID --addr=$TARGET_ADDRESS\n"})}),(0,n.jsx)(s.h3,{id:"whitelist-role-permission",children:(0,n.jsx)(s.strong,{children:"Whitelist Role Permission"})}),(0,n.jsxs)(s.p,{children:["Whitelist a permission to a role with sudo permissions using the ",(0,n.jsx)(s.code,{children:"whitelist-permission"})," command followed by the role's identifier ",(0,n.jsx)(s.code,{children:"$ROLE_ID"})," and the permission's identifier ",(0,n.jsx)(s.code,{children:"$PERMISSION_ID"}),"."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov role whitelist-permission \\\n--from=$SIGNER $FLAGS_TX \\\n$ROLE_ID $PERMISSION_ID\n"})}),(0,n.jsxs)(s.h3,{id:"blacklist-roles-permission",children:["Blacklist ",(0,n.jsx)(s.strong,{children:"Role\u2019s"})," Permission"]}),(0,n.jsxs)(s.p,{children:["Blacklist a permission for a governance role with sudo permissions using the ",(0,n.jsx)(s.code,{children:"blacklist-permission"})," command followed by the role's identifier ",(0,n.jsx)(s.code,{children:"$ROLE_ID"})," and the permission's identifier ",(0,n.jsx)(s.code,{children:"$PERMISSION_ID"}),"."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov role blacklist-permission \\\n--from=$SIGNER $FLAGS_TX \\\n$ROLE_ID $PERMISSION_ID\n"})}),(0,n.jsx)(s.h3,{id:"remove-roles-whitelisted-permission",children:(0,n.jsx)(s.strong,{children:"Remove Role\u2019s Whitelisted Permission"})}),(0,n.jsxs)(s.p,{children:["Remove a whitelisted permission from a governance role with sudo permissions using the ",(0,n.jsx)(s.code,{children:"remove-whitelisted-permission"})," command followed by the role's identifier ",(0,n.jsx)(s.code,{children:"$ROLE_ID"})," and the permission's identifier ",(0,n.jsx)(s.code,{children:"$PERMISSION_ID"}),"."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov role remove-whitelisted-permission \\\n--from=$SIGNER $FLAGS_TX \\\n$ROLE_ID $PERMISSION_ID\n"})}),(0,n.jsx)(s.h3,{id:"remove-roles-blacklisted-permission",children:(0,n.jsx)(s.strong,{children:"Remove Role\u2019s Blacklisted Permission"})}),(0,n.jsxs)(s.p,{children:["Remove a blacklisted permission from a governance role with sudo permissions using the ",(0,n.jsx)(s.code,{children:"remove-blacklisted-permission"})," command followed by the role's identifier ",(0,n.jsx)(s.code,{children:"$ROLE_ID"})," and the permission's identifier ",(0,n.jsx)(s.code,{children:"$PERMISSION_ID"}),"."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov role remove-blacklisted-permission \\\n--from=$SIGNER $FLAGS_TX \\\n$ROLE_ID $PERMISSION_ID\n"})}),(0,n.jsx)(s.h3,{id:"whitelist-account-permission",children:(0,n.jsx)(s.strong,{children:"Whitelist Account Permission"})}),(0,n.jsxs)(s.p,{children:["Assign permission to a Kira address whitelist with sudo permissions using the ",(0,n.jsx)(s.code,{children:"whitelist"})," command."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ADDRESS"}),": The address for which permissions should be set."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$PERMISSION"}),": The permission value to be assigned."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov permission whitelist \\\n--from=$SIGNER $FLAGS_TX \\\n--addr=$ADDRESS --permission=$PERMISSION\n"})}),(0,n.jsx)(s.h3,{id:"remove-account-whitelisted-permission",children:(0,n.jsx)(s.strong,{children:"Remove Account Whitelisted Permission"})}),(0,n.jsxs)(s.p,{children:["Remove whitelisted permission from an address with sudo permissions using the ",(0,n.jsx)(s.code,{children:"remove-whitelisted"})," command."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ADDRESS"}),": The address from which permissions should be removed."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$PERMISSION"}),": The permission value to be removed."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov permission remove-whitelisted \\\n--from=$SIGNER $FLAGS_TX \\\n--addr=$ADDRESS --permission=$PERMISSION\n"})}),(0,n.jsx)(s.h3,{id:"blacklist-accounts-permission",children:(0,n.jsx)(s.strong,{children:"Blacklist Account\u2019s Permission"})}),(0,n.jsxs)(s.p,{children:["Assign permission to a Kira account blacklist with sudo permissions using the ",(0,n.jsx)(s.code,{children:"blacklist"})," command."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ADDRESS"}),": The address for which permissions should be set."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$PERMISSION"}),": The permission value to be assigned."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov permission blacklist \\\n--from=$SIGNER $FLAGS_TX \\\n--addr=$ADDRESS --permission=$PERMISSION\n"})}),(0,n.jsx)(s.h3,{id:"remove-accounts-blacklisted-permissions",children:(0,n.jsx)(s.strong,{children:"Remove Account\u2019s Blacklisted Permissions"})}),(0,n.jsxs)(s.p,{children:["Remove blacklisted permission from an address with sudo permissions using the ",(0,n.jsx)(s.code,{children:"remove-blacklisted"})," command."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ADDRESS"}),": The address from which permissions should be removed."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$PERMISSION"}),": The permission value to be removed."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov permission remove-blacklisted \\\n--from=$SIGNER $FLAGS_TX \\\n--addr=$ADDRESS --permission=$PERMISSION\n"})})]}),(0,n.jsxs)(o.Z,{value:"queries",label:"Queries",children:[(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:(0,n.jsx)(s.code,{children:"permissions"})}),(0,n.jsx)(s.th,{children:"Query permissions of a specific KIRA address."})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"whitelisted-permission-addresses"})}),(0,n.jsx)(s.td,{children:"Query addresses associated with a whitelisted permission."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"blacklisted-permission-addresses"})}),(0,n.jsx)(s.td,{children:"Query addresses associated with a blacklisted permission."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"all-roles"})}),(0,n.jsx)(s.td,{children:"Query all registered roles in the KIRA network."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"roles"})}),(0,n.jsx)(s.td,{children:"Query roles assigned to a specific KIRA address."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"role"})}),(0,n.jsx)(s.td,{children:"Query information about a role using its Service Identifier (SID)."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"whitelisted-role-addresses"})}),(0,n.jsx)(s.td,{children:"Query addresses associated with a whitelisted role."})]})]})]}),(0,n.jsx)(s.h3,{id:"query-address-permissions",children:(0,n.jsx)(s.strong,{children:"Query Address Permissions"})}),(0,n.jsxs)(s.p,{children:["Retrieve the permissions associated with a specific KIRA address using the ",(0,n.jsx)(s.code,{children:"permissions"})," command."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$ADDR"}),": The address whose permissions are to be queried."]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"sekaid query customgov permissions $ADDR $FLAGS_QR | jq\n"})}),(0,n.jsx)(s.h3,{id:"query-addresses-by-whitelisted-permission",children:(0,n.jsx)(s.strong,{children:"Query Addresses by Whitelisted Permission"})}),(0,n.jsxs)(s.p,{children:["List all KIRA addresses that are associated with a specific whitelisted permission using the ",(0,n.jsx)(s.code,{children:"whitelisted-permission-addresses"})," command."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$PERM"}),": The whitelisted permission value to be queried."]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"sekaid query customgov whitelisted-permission-addresses $PERM $FLAGS_QR | jq\n"})}),(0,n.jsx)(s.h3,{id:"query-addresses-by-blacklisted-permission",children:(0,n.jsx)(s.strong,{children:"Query Addresses by Blacklisted Permission"})}),(0,n.jsxs)(s.p,{children:["List all KIRA addresses that are associated with a specific blacklisted permission using the ",(0,n.jsx)(s.code,{children:"blacklisted-permission-addresses"})," command."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$PERM"}),": The blacklisted permission value to be queried."]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"sekaid query customgov blacklisted-permission-addresses $PERM $FLAGS_QR | jq\n"})}),(0,n.jsx)(s.h3,{id:"query-all-registered-roles",children:(0,n.jsx)(s.strong,{children:"Query All Registered Roles"})}),(0,n.jsxs)(s.p,{children:["Retrieve a list of all registered roles in the KIRA network using the ",(0,n.jsx)(s.code,{children:"all-roles"})," command."]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"sekaid query customgov all-roles $FLAGS_QR | jq\n"})}),(0,n.jsx)(s.h3,{id:"query-roles-assigned-to-an-address",children:(0,n.jsx)(s.strong,{children:"Query Roles Assigned to an Address"})}),(0,n.jsxs)(s.p,{children:["Retrieve the roles assigned to a specific KIRA address using the ",(0,n.jsx)(s.code,{children:"roles"})," command."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$ADDR"}),": The address whose roles are to be queried."]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"sekaid query customgov roles $ADDR $FLAGS_QR | jq\n"})}),(0,n.jsx)(s.h3,{id:"query-role-by-sid",children:(0,n.jsx)(s.strong,{children:"Query Role by SID"})}),(0,n.jsxs)(s.p,{children:["Retrieve information about a specific role using its SID (Service Identifier) with the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"role"})})," command."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$ROLE_IDENTIFIER"}),": The SID of the role to be queried."]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"sekaid query customgov role $ROLE_IDENTIFIER $FLAGS_QR | jq\n"})}),(0,n.jsx)(s.h3,{id:"query-addresses-by-whitelisted-role",children:(0,n.jsx)(s.strong,{children:"Query Addresses by Whitelisted Role"})}),(0,n.jsxs)(s.p,{children:["List all KIRA addresses associated with a specific whitelisted role using the ",(0,n.jsx)(s.code,{children:"whitelisted-role-addresses"})," command."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$ROLE"}),": The whitelisted role value to be queried."]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"sekaid query customgov whitelisted-role-addresses $ROLE $FLAGS_QR | jq\n"})})]}),(0,n.jsxs)(o.Z,{value:"governance",label:"Governance",children:[(0,n.jsxs)(s.p,{children:["To assign governance permissions, a group of governance members must submit and vote a proposal using ",(0,n.jsx)(s.code,{children:"whitelist-permission"})," with the appropriate proposal creation permission 4 and voting permission 5. Sudo permissions can be assigned by an account which has the permission 1."]}),(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:(0,n.jsx)(s.code,{children:"proposal account assign-role"})}),(0,n.jsx)(s.th,{children:"Proposal to assign a role to an address."})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"proposal account unassign-role"})}),(0,n.jsx)(s.td,{children:"Proposal to unassign a role from an address."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"proposal account blacklist-permission"})}),(0,n.jsx)(s.td,{children:"Proposal to blacklist a permission for an account."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"proposal account remove-blacklisted-permission"})}),(0,n.jsx)(s.td,{children:"Proposal to remove a blacklisted permission from an account."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"proposal account whitelist-permission"})}),(0,n.jsx)(s.td,{children:"Proposal to whitelist a permission for an account."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"proposal account remove-whitelisted-permission"})}),(0,n.jsx)(s.td,{children:"Proposal to remove a whitelisted permission from an account."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"proposal role create"})}),(0,n.jsx)(s.td,{children:"Proposal to create a new role."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"proposal role remove"})}),(0,n.jsx)(s.td,{children:"Proposal to remove an existing role."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"proposal role whitelist-permission"})}),(0,n.jsx)(s.td,{children:"Proposal to whitelist a permission for a role."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"proposal role remove-whitelisted-permission"})}),(0,n.jsx)(s.td,{children:"Proposal to remove a whitelisted permission from a role."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"proposal role blacklist-permission"})}),(0,n.jsx)(s.td,{children:"Proposal to blacklist a permission for a role."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"proposal role remove-blacklisted-permission"})}),(0,n.jsx)(s.td,{children:"Proposal to remove a blacklisted permission from a role."})]})]})]}),(0,n.jsx)(s.h3,{id:"assign-role-to-account",children:"Assign Role to Account"}),(0,n.jsxs)(s.p,{children:["The CLI command, ",(0,n.jsx)(s.code,{children:"assign-role"}),", is utilized to create a proposal for assigning a role to an address."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$ROLE_SID"}),": The string identifier of the role to be assigned."]}),"\n"]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$TITLE"}),": The title of the proposal."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$DESCRIPTION"}),": The proposal\u2019s description."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ADDRESS"}),": The address to which the role will be assigned. Requires a valid blockchain address."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"sekaid tx customgov proposal account assign-role \\\n--from=$SIGNER $FLAGS_TX \\\n--title=$TITLE --description=$DESCRIPTION \\\n--address=$ADDRESS \\\n$ROLE_SID\n"})}),(0,n.jsx)(s.h3,{id:"unassign-role-from-account",children:"Unassign Role from Account"}),(0,n.jsxs)(s.p,{children:["The CLI command, ",(0,n.jsx)(s.code,{children:"unassign-role"}),", creates a proposal for unassigning a role from an address."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$ROLE_SID"}),": The string identifier of the role to be unassigned."]}),"\n"]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$TITLE"}),": The title of the proposal."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$DESCRIPTION"}),": The proposal\u2019s description."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ADDRESS"}),": The address from which the role will be unassigned. Requires a valid blockchain address."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"sekaid tx customgov proposal account unassign-role \\\n--from=$SIGNER $FLAGS_TX \\\n--title=$TITLE --description=$DESCRIPTION \\\n--address=$ADDRESS \\\n$ROLE_SID\n"})}),(0,n.jsx)(s.h3,{id:"blacklist-permission-for-account",children:"Blacklist Permission for Account"}),(0,n.jsxs)(s.p,{children:["The CLI command, ",(0,n.jsx)(s.code,{children:"blacklist-permission"}),", is for creating a proposal to blacklist a specific permission for an address."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$PERMISSION_ID"}),": The ID of the permission to be blacklisted. Must be an integer."]}),"\n"]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$TITLE"}),": The title of the proposal."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$DESCRIPTION"}),": The proposal\u2019s description."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ADDRESS"}),": The address for which permissions will be set. Requires a valid blockchain address."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"sekaid tx customgov proposal account blacklist-permission \\\n--from=$SIGNER $FLAGS_TX \\\n--title=$TITLE --description=$DESCRIPTION \\\n--address=$ADDRESS \\\n$PERMISSION_ID\n"})}),(0,n.jsx)(s.h3,{id:"remove-blacklisted-permission-from-account",children:"Remove Blacklisted Permission from Account"}),(0,n.jsxs)(s.p,{children:["The CLI command, ",(0,n.jsx)(s.code,{children:"remove-blacklisted-permission"}),", removes a blacklisted permission from an address."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$PERMISSION_ID"}),": The ID of the blacklisted permission to be removed. Must be an integer."]}),"\n"]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$TITLE"}),": The title of the proposal."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$DESCRIPTION"}),": The proposal\u2019s description."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ADDRESS"}),": The address from which the blacklisted permission will be removed. Requires a valid blockchain address."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"sekaid tx customgov proposal account remove-blacklisted-permission \\\n--from=$SIGNER $FLAGS_TX \\\n--title=$TITLE --description=$DESCRIPTION \\\n--address=$ADDRESS \\\n$PERMISSION_ID\n"})}),(0,n.jsx)(s.h3,{id:"whitelist-permission-for-account",children:"Whitelist Permission for Account"}),(0,n.jsxs)(s.p,{children:["The CLI command, ",(0,n.jsx)(s.code,{children:"whitelist-permission"}),", is used for creating a proposal to whitelist a specific permission for an address."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$PERMISSION_ID"}),": The ID of the permission to be whitelisted. Must be an integer."]}),"\n"]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$TITLE"}),": The title of the proposal."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$DESCRIPTION"}),": The proposal\u2019s description."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ADDRESS"}),": The address for which permissions will be set. Requires a valid blockchain address."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"sekaid tx customgov proposal account whitelist-permission \\\n--from=$SIGNER $FLAGS_TX \\\n--title=$TITLE --description=$DESCRIPTION \\\n--address=$ADDRESS \\\n$PERMISSION_ID\n"})}),(0,n.jsx)(s.h3,{id:"remove-whitelisted-permission-from-account",children:"Remove Whitelisted Permission from Account"}),(0,n.jsxs)(s.p,{children:["The CLI command, ",(0,n.jsx)(s.code,{children:"remove-whitelisted-permission"}),", removes a whitelisted permission from an address."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$PERMISSION_ID"}),": The ID of the whitelisted permission to be removed. Must be an integer."]}),"\n"]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$TITLE"}),": The title of the proposal."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$DESCRIPTION"}),": The proposal\u2019s description."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ADDRESS"}),": The address from which the whitelisted permission will be removed. Requires a valid blockchain address."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov proposal account remove-whitelisted-permission \\\n--from=$SIGNER $FLAGS_TX \\\n--title=$TITLE --description=$DESCRIPTION \\\n--address=$ADDRESS \\\n$PERMISSION_ID\n"})}),(0,n.jsx)(s.h3,{id:"create-role-1",children:"Create Role"}),(0,n.jsxs)(s.p,{children:["The CLI command, ",(0,n.jsx)(s.code,{children:"create"}),", is for raising a governance proposal to create a new role."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ROLE_SID"}),": The string identifier of the new role."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ROLE_DESCRIPTION"}),": The description of the new role."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$TITLE"}),": The title of the proposal."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$DESCRIPTION"}),": The proposal\u2019s description."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$WHITELIST_PERMS"}),": A comma-separated list of permission IDs to be whitelisted for the role."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$BLACKLIST_PERMS"}),": A comma-separated list of permission IDs to be blacklisted for the role."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov proposal role create \\\n--from=$SIGNER $FLAGS_TX \\\n--title=$TITLE --description=$DESCRIPTION \\\n--whitelist-perms=$WHITELIST_PERMS \\\n--blacklist-perms=$BLACKLIST_PERMS \\\n$ROLE_SID $ROLE_DESCRIPTION\n"})}),(0,n.jsx)(s.h3,{id:"remove-role-1",children:"Remove Role"}),(0,n.jsxs)(s.p,{children:["The CLI command, ",(0,n.jsx)(s.code,{children:"remove"}),", raises a governance proposal for removing an existing role."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"$ROLE_SID"}),": The string identifier of the role to be removed."]}),"\n"]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$TITLE"}),": The title of the proposal."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$DESCRIPTION"}),": The proposal\u2019s description."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov proposal role remove \\\n--from=$SIGNER $FLAGS_TX \\\n--title=$TITLE --description=$DESCRIPTION \\\n$ROLE_SID\n"})}),(0,n.jsx)(s.h3,{id:"whitelist-permission-for-role",children:"Whitelist Permission for Role"}),(0,n.jsxs)(s.p,{children:["The CLI command, ",(0,n.jsx)(s.code,{children:"whitelist-permission"}),", is for whitelisting permissions for a specific role."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ROLE_SID"}),": The string identifier of the role."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$PERMISSION_ID"}),": The ID of the permission to be whitelisted. Must be an integer."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$TITLE"}),": The title of the proposal."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$DESCRIPTION"}),": The proposal\u2019s description."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov proposal role whitelist-permission \\\n--from=$SIGNER $FLAGS_TX \\\n--title=$TITLE --description=$DESCRIPTION \\\n$ROLE_SID $PERMISSION_ID\n"})}),(0,n.jsx)(s.h3,{id:"remove-whitelisted-permission-from-role",children:"Remove Whitelisted Permission from Role"}),(0,n.jsxs)(s.p,{children:["The CLI command, ",(0,n.jsx)(s.code,{children:"remove-whitelisted-permission"}),", removes a whitelisted permission from a role."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ROLE_SID"}),": The string identifier of the role."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$PERMISSION_ID"}),": The ID of the permission to be removed. Must be an integer."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$TITLE"}),": The title of the proposal."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$DESCRIPTION"}),": The proposal\u2019s description."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov proposal role remove-whitelisted-permission \\\n--from=$SIGNER $FLAGS_TX \\\n--title=$TITLE --description=$DESCRIPTION \\\n$ROLE_SID $PERMISSION_ID\n"})}),(0,n.jsx)(s.h3,{id:"blacklist-permission-for-role",children:"Blacklist Permission for Role"}),(0,n.jsxs)(s.p,{children:["The CLI command, ",(0,n.jsx)(s.code,{children:"blacklist-permission"}),", is for blacklisting permissions for a specific role."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ROLE_SID"}),": The string identifier of the role."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$PERMISSION_ID"}),": The ID of the permission to be blacklisted. Must be an integer."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$TITLE"}),": The title of the proposal."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$DESCRIPTION"}),": The proposal\u2019s description."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov proposal role blacklist-permission \\\n--from=$SIGNER $FLAGS_TX \\\n--title=$TITLE --description=$DESCRIPTION \\\n$ROLE_SID $PERMISSION_ID\n"})}),(0,n.jsx)(s.h3,{id:"remove-blacklisted-permission-from-role",children:"Remove Blacklisted Permission from Role"}),(0,n.jsxs)(s.p,{children:["The CLI command, ",(0,n.jsx)(s.code,{children:"remove-blacklisted-permission"}),", removes a blacklisted permission from a role."]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Args"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$ROLE_SID"}),": The string identifier of the role."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$PERMISSION_ID"}),": The ID of the permission to be removed. Must be an integer."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Flags"})}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$TITLE"}),": The title of the proposal."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"$DESCRIPTION"}),": The proposal\u2019s description."]}),"\n"]}),"\n"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sekaid tx customgov proposal role remove-blacklisted-permission \\\n--from=$SIGNER $FLAGS_TX \\\n--title=$TITLE --description=$DESCRIPTION \\\n$ROLE_SID $PERMISSION_ID\n"})})]})]})]})}function m(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(x,{...e})}):x(e)}},5162:(e,s,i)=>{i.d(s,{Z:()=>o});i(7294);var n=i(6905);const r={tabItem:"tabItem_Ymn6"};var l=i(5893);function o(e){let{children:s,hidden:i,className:o}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,n.Z)(r.tabItem,o),hidden:i,children:s})}},4866:(e,s,i)=>{i.d(s,{Z:()=>R});var n=i(7294),r=i(6905),l=i(2466),o=i(6550),d=i(469),t=i(1980),c=i(7392),a=i(12);function h(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:s}=e;return!!s&&"object"==typeof s&&"value"in s}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:s,children:i}=e;return(0,n.useMemo)((()=>{const e=s??function(e){return h(e).map((e=>{let{props:{value:s,label:i,attributes:n,default:r}}=e;return{value:s,label:i,attributes:n,default:r}}))}(i);return function(e){const s=(0,c.l)(e,((e,s)=>e.value===s.value));if(s.length>0)throw new Error(`Docusaurus error: Duplicate values "${s.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[s,i])}function m(e){let{value:s,tabValues:i}=e;return i.some((e=>e.value===s))}function j(e){let{queryString:s=!1,groupId:i}=e;const r=(0,o.k6)(),l=function(e){let{queryString:s=!1,groupId:i}=e;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:s,groupId:i});return[(0,t._X)(l),(0,n.useCallback)((e=>{if(!l)return;const s=new URLSearchParams(r.location.search);s.set(l,e),r.replace({...r.location,search:s.toString()})}),[l,r])]}function p(e){const{defaultValue:s,queryString:i=!1,groupId:r}=e,l=x(e),[o,t]=(0,n.useState)((()=>function(e){let{defaultValue:s,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!m({value:s,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${s}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return s}const n=i.find((e=>e.default))??i[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:s,tabValues:l}))),[c,h]=j({queryString:i,groupId:r}),[p,u]=function(e){let{groupId:s}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(s),[r,l]=(0,a.Nk)(i);return[r,(0,n.useCallback)((e=>{i&&l.set(e)}),[i,l])]}({groupId:r}),g=(()=>{const e=c??p;return m({value:e,tabValues:l})?e:null})();(0,d.Z)((()=>{g&&t(g)}),[g]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);t(e),h(e),u(e)}),[h,u,l]),tabValues:l}}var u=i(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=i(5893);function b(e){let{className:s,block:i,selectedValue:n,selectValue:o,tabValues:d}=e;const t=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),a=e=>{const s=e.currentTarget,i=t.indexOf(s),r=d[i].value;r!==n&&(c(s),o(r))},h=e=>{let s=null;switch(e.key){case"Enter":a(e);break;case"ArrowRight":{const i=t.indexOf(e.currentTarget)+1;s=t[i]??t[0];break}case"ArrowLeft":{const i=t.indexOf(e.currentTarget)-1;s=t[i]??t[t.length-1];break}}s?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},s),children:d.map((e=>{let{value:s,label:i,attributes:l}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:n===s?0:-1,"aria-selected":n===s,ref:e=>t.push(e),onKeyDown:h,onClick:a,...l,className:(0,r.Z)("tabs__item",g.tabItem,l?.className,{"tabs__item--active":n===s}),children:i??s},s)}))})}function v(e){let{lazy:s,children:i,selectedValue:r}=e;const l=(Array.isArray(i)?i:[i]).filter(Boolean);if(s){const e=l.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:l.map(((e,s)=>(0,n.cloneElement)(e,{key:s,hidden:e.props.value!==r})))})}function I(e){const s=p(e);return(0,f.jsxs)("div",{className:(0,r.Z)("tabs-container",g.tabList),children:[(0,f.jsx)(b,{...e,...s}),(0,f.jsx)(v,{...e,...s})]})}function R(e){const s=(0,u.Z)();return(0,f.jsx)(I,{...e,children:h(e.children)},String(s))}},1151:(e,s,i)=>{i.d(s,{Z:()=>d,a:()=>o});var n=i(7294);const r={},l=n.createContext(r);function o(e){const s=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(l.Provider,{value:s},e.children)}}}]);